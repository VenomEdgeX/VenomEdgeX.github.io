const FRAMERATE = 10;const Cell = 20; // 30 Cells in this gamevar canvas;var canvasContext;var direction;var gameOver = false;var showingEndScreen = false;var snake = [];snake[0] = {		x : 2 * Cell,		y : 5 * Cell}	var food;food = {		x: Math.floor(Math.random() * 27 + 1) * Cell,		y: Math.floor(Math.random() * 24 + 4) * Cell}var score = 0;window.onload = function() {	canvas = document.getElementById('gameCanvas');	canvasContext = canvas.getContext('2d');		window.addEventListener('mousedown', mouseHandler);	window.addEventListener('keydown', eventHandler);	let running = setInterval(game, 1000/FRAMERATE);		}function mouseHandler(evt){	if(gameOver){		gameOver = false;		showingEndScreen = false;		score = 0;		snake = [];		snake[0] = {			x : 2 * Cell,			y : 5 * Cell		}		food = {			x: Math.floor(Math.random() * 27 + 1) * Cell,			y: Math.floor(Math.random() * 24 + 4) * Cell		}		direction = null;	}}function game(){	if(gameOver){		if(!showingEndScreen){			canvasContext.fillStyle = 'white';			canvasContext.font="45px Verdana"			canvasContext.fillText("Game Over!", 9*Cell, canvas.height/2);			canvasContext.font="25px Verdana"			canvasContext.fillText("Click to replay", 11*Cell, canvas.height/1.5);			showingEndScreen = true;		}		return;	}			move();	draw();}function move() {	// Old Head Pos	var snakeX = snake[0].x;	var snakeY = snake[0].y;				// Direction it's going	if (direction == 'Right') snakeX += Cell;	if (direction == 'Left') snakeX -= Cell;	if (direction == 'Up') snakeY -= Cell;	if (direction == 'Down') snakeY += Cell;			// Snake eats food	if (snakeX == food.x && snakeY == food.y) {		score++;		food = {			x: Math.floor(Math.random() * 27 + 1) * Cell,			y: Math.floor(Math.random() * 24 + 4) * Cell		}		// Don't remove tail	} else {		// Remove Tail		snake.pop();	}		//add the new Head	var newHead = {		x : snakeX,		y : snakeY	}		// Game over	if (snakeX < Cell 	|| snakeX > 28 * Cell 	|| snakeY < 4 * Cell 	|| snakeY > 28 * Cell 	|| collision(newHead, snake)) {		gameOver = true;	}			snake.unshift(newHead);}function draw() {	drawRect(0, 0, canvas.width, canvas.height, 'black');			for(var i=0; i<snake.length; i++){		canvasContext.fillStyle = ( i==0 )? 'white' : 'gray';		canvasContext.fillRect(snake[i].x, snake[i].y, Cell, Cell);				canvasContext.strokeStyle = 'blue';		canvasContext.strokeRect(snake[i].x, snake[i].y, Cell, Cell);	}	// Draw food	drawRect(food.x, food.y, Cell, Cell, 'orange');	// draw the user interface	drawUI();}function drawUI() {	drawRect(0, 0, canvas.width, 4*Cell, 'gray');	drawRect(0, 0, Cell, canvas.height, 'gray');	drawRect(29*Cell, 0, Cell, canvas.height, 'gray');	drawRect(0, 29*Cell, canvas.width, Cell, 'gray');	canvasContext.fillStyle = 'white';	canvasContext.font="30px Verdana"	canvasContext.fillText("Score: " + score, Cell, 2.5 * Cell);}function collision(head, array){	for(var i=0; i < array.length; i++){		if(head.x == array[i].x && head.y == array[i].y){			return true;		}	}	return false;}function eventHandler(evt){	if((evt.key == 'ArrowRight' || evt.key == 'd') && direction != 'Left'){		direction = 'Right';	} else if((evt.key == 'ArrowLeft' || evt.key == 'a') && direction != 'Right'){		direction = 'Left';	} else if((evt.key == 'ArrowDown' || evt.key == 's') && direction != 'Up'){		direction = 'Down';	} else if((evt.key == 'ArrowUp' || evt.key == 'w') && direction != 'Down'){		direction = 'Up';	} }function drawRect(posX, posY, width, height, color) {	canvasContext.fillStyle = color;	canvasContext.fillRect(posX, posY, width, height);	}function drawLine(startX, startY, finishX, finishY, lineWidth, color) {	canvasContext.strokeStyle = color;	canvasContext.lineWidth = lineWidth;	canvasContext.beginPath();	canvasContext.moveTo(startX, startY);	canvasContext.lineTo(finishX, finishY);	canvasContext.stroke();}